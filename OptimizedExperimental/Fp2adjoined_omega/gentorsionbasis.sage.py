

# This file was *autogenerated* from the file gentorsionbasis.sage
from sage.all_cmdline import *   # import sage library

_sage_const_6143 = Integer(6143); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_5736 = Integer(5736); _sage_const_2534 = Integer(2534); _sage_const_4 = Integer(4); _sage_const_216 = Integer(216); _sage_const_3 = Integer(3); _sage_const_27 = Integer(27); _sage_const_0 = Integer(0)
p = _sage_const_6143 

K = GF(p**_sage_const_2 , name='w', modulus=x**_sage_const_2 +x+_sage_const_1 , names=('w',)); (w,) = K._first_ngens(1)

x = PolynomialRing(K, 'x').gen()

j = _sage_const_5736  + _sage_const_2534 *w
a = _sage_const_1 
f = (x**_sage_const_4  + _sage_const_216 *a*x)**_sage_const_3  - j*a*((x**_sage_const_3 -_sage_const_27 *a)**_sage_const_3 )
print(f.roots())
d = f.roots()[-_sage_const_1 ][_sage_const_0 ]
print("a = {}".format(a))
print("d = {}".format(d))

def genPoint(P):
	l = []
	while not l:
		px = randint(_sage_const_0 , p) + randint(_sage_const_0 , p)*w
		f = a*px**_sage_const_3  + x**_sage_const_3  + _sage_const_1  - d*px*x
		l = f.roots()
	y = l[_sage_const_0 ][_sage_const_0 ]
	print("{}.X = {}".format(P, px))
	print("{}.Y = {}".format(P, y))

print()
genPoint("aliceP")
print()
genPoint("aliceQ")
print()
genPoint("bobP")
print()
genPoint("bobQ")

